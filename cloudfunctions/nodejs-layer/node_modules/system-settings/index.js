'use strict';

const COLLECTIONS = require('common-config').COLLECTIONS;

const SYSTEM_SETTINGS_COLLECTION = COLLECTIONS.SYSTEM_SETTINGS;
const FEATURE_TOGGLE_DOC_ID = 'feature_toggles';

const DEFAULT_RAGE_SETTINGS = Object.freeze({
  start: 0,
  turnGain: 20,
  basicAttackGain: 10,
  damageTakenMultiplier: 1.5,
  critGain: 1,
  critTakenGain: 1
});

const DEFAULT_GAME_PARAMETERS = Object.freeze({
  rage: DEFAULT_RAGE_SETTINGS
});

function toNumber(value) {
  const numeric = Number(value);
  return Number.isFinite(numeric) ? numeric : NaN;
}

function clampNonNegative(value) {
  return Math.max(0, value);
}

function normalizeRageSettings(raw) {
  const base = raw && typeof raw === 'object' ? raw : {};
  const normalized = {
    start: clampNonNegative(toNumber(base.start))
  };
  if (Number.isNaN(normalized.start)) {
    normalized.start = DEFAULT_RAGE_SETTINGS.start;
  }

  normalized.turnGain = clampNonNegative(toNumber(base.turnGain));
  if (Number.isNaN(normalized.turnGain)) {
    normalized.turnGain = DEFAULT_RAGE_SETTINGS.turnGain;
  }

  normalized.basicAttackGain = clampNonNegative(toNumber(base.basicAttackGain));
  if (Number.isNaN(normalized.basicAttackGain)) {
    normalized.basicAttackGain = DEFAULT_RAGE_SETTINGS.basicAttackGain;
  }

  const damageTakenMultiplier = toNumber(base.damageTakenMultiplier);
  normalized.damageTakenMultiplier = Number.isNaN(damageTakenMultiplier)
    ? DEFAULT_RAGE_SETTINGS.damageTakenMultiplier
    : Math.max(0, damageTakenMultiplier);

  const critGain = toNumber(base.critGain);
  normalized.critGain = Number.isNaN(critGain)
    ? DEFAULT_RAGE_SETTINGS.critGain
    : clampNonNegative(critGain);

  const critTakenGain = toNumber(base.critTakenGain);
  normalized.critTakenGain = Number.isNaN(critTakenGain)
    ? DEFAULT_RAGE_SETTINGS.critTakenGain
    : clampNonNegative(critTakenGain);

  return normalized;
}

function normalizeGameParameters(raw) {
  const base = raw && typeof raw === 'object' ? raw : {};
  return {
    rage: normalizeRageSettings(base.rage)
  };
}

function cloneRageSettings(settings = DEFAULT_RAGE_SETTINGS) {
  const normalized = normalizeRageSettings(settings);
  return {
    start: normalized.start,
    turnGain: normalized.turnGain,
    basicAttackGain: normalized.basicAttackGain,
    damageTakenMultiplier: normalized.damageTakenMultiplier,
    critGain: normalized.critGain,
    critTakenGain: normalized.critTakenGain
  };
}

function cloneGameParameters(parameters = DEFAULT_GAME_PARAMETERS) {
  const normalized = normalizeGameParameters(parameters);
  return {
    rage: cloneRageSettings(normalized.rage)
  };
}

function serializeRageSettings(settings) {
  const normalized = normalizeRageSettings(settings);
  return {
    start: normalized.start,
    turnGain: normalized.turnGain,
    basicAttackGain: normalized.basicAttackGain,
    damageTakenMultiplier: normalized.damageTakenMultiplier,
    critGain: normalized.critGain,
    critTakenGain: normalized.critTakenGain
  };
}

function serializeGameParameters(parameters) {
  const normalized = normalizeGameParameters(parameters);
  return {
    rage: serializeRageSettings(normalized.rage)
  };
}

function resolveRageSettingsSource(documentData) {
  if (!documentData || typeof documentData !== 'object') {
    return null;
  }
  if (documentData.gameParameters && typeof documentData.gameParameters === 'object') {
    return documentData.gameParameters.rage || null;
  }
  if (documentData.rageSettings) {
    return documentData.rageSettings;
  }
  return null;
}

function resolveGameParametersFromDocument(documentData) {
  const rageSource = resolveRageSettingsSource(documentData);
  if (!rageSource) {
    return cloneGameParameters(DEFAULT_GAME_PARAMETERS);
  }
  return {
    rage: normalizeRageSettings(rageSource)
  };
}

function buildResourceConfigOverrides(parameters) {
  const normalized = normalizeGameParameters(parameters);
  return {
    startValue: normalized.rage.start,
    turnGain: normalized.rage.turnGain,
    basicAttackGain: normalized.rage.basicAttackGain,
    damageTakenGain: normalized.rage.damageTakenMultiplier,
    critGain: normalized.rage.critGain,
    critTakenGain: normalized.rage.critTakenGain
  };
}

module.exports = {
  SYSTEM_SETTINGS_COLLECTION,
  FEATURE_TOGGLE_DOC_ID,
  DEFAULT_RAGE_SETTINGS,
  DEFAULT_GAME_PARAMETERS,
  normalizeRageSettings,
  normalizeGameParameters,
  serializeRageSettings,
  serializeGameParameters,
  resolveGameParametersFromDocument,
  buildResourceConfigOverrides,
  cloneRageSettings,
  cloneGameParameters
};

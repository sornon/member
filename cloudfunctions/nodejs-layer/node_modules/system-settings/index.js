'use strict';

const {
  COLLECTIONS,
  normalizeBackgroundId,
  getDefaultBackgroundId
} = require('common-config');

const SYSTEM_SETTINGS_COLLECTION = COLLECTIONS.SYSTEM_SETTINGS;
const FEATURE_TOGGLE_DOC_ID = 'feature_toggles';

const DEFAULT_CACHE_VERSIONS = Object.freeze({
  global: 1,
  menu: 1
});

const DEFAULT_HOME_ENTRIES = Object.freeze({
  activities: true,
  mall: true,
  secretRealm: false,
  rights: true,
  pvp: false,
  trading: false
});

const DEFAULT_RAGE_SETTINGS = Object.freeze({
  start: 0,
  turnGain: 20,
  basicAttackGain: 10,
  damageTakenMultiplier: 1.5,
  critGain: 1,
  critTakenGain: 1
});

const DEFAULT_GAME_PARAMETERS = Object.freeze({
  rage: DEFAULT_RAGE_SETTINGS
});

const DEFAULT_GLOBAL_BACKGROUND = Object.freeze({
  enabled: false,
  backgroundId: '',
  animated: false
});

function toCacheVersionNumber(value, fallback = 1) {
  const numeric = Number(value);
  if (!Number.isFinite(numeric)) {
    const fallbackNumeric = Number(fallback);
    if (!Number.isFinite(fallbackNumeric)) {
      return 1;
    }
    return Math.max(0, Math.floor(fallbackNumeric));
  }
  if (numeric >= Number.MAX_SAFE_INTEGER) {
    return 1;
  }
  return Math.max(0, Math.floor(numeric));
}

function normalizeCacheVersions(raw) {
  const source = raw && typeof raw === 'object' ? raw : {};
  const keys = new Set([
    ...Object.keys(DEFAULT_CACHE_VERSIONS),
    ...Object.keys(source)
  ]);
  const versions = {};
  keys.forEach((key) => {
    versions[key] = toCacheVersionNumber(
      source[key],
      DEFAULT_CACHE_VERSIONS[key] || 1
    );
  });
  return versions;
}

function cloneCacheVersions(raw = DEFAULT_CACHE_VERSIONS) {
  const normalized = normalizeCacheVersions(raw);
  return { ...normalized };
}

function toBoolean(value, fallback = false) {
  if (typeof value === 'boolean') {
    return value;
  }
  if (typeof value === 'number') {
    if (!Number.isFinite(value)) {
      return fallback;
    }
    return value !== 0;
  }
  if (typeof value === 'string') {
    const trimmed = value.trim();
    if (!trimmed) {
      return fallback;
    }
    const normalized = trimmed.toLowerCase();
    if (['false', '0', 'off', 'no', '关闭', '否', '禁用', '停用', 'disabled'].includes(normalized)) {
      return false;
    }
    if (['true', '1', 'on', 'yes', '开启', '启用', 'enable', 'enabled'].includes(normalized)) {
      return true;
    }
    return fallback;
  }
  if (value == null) {
    return fallback;
  }
  if (typeof value.valueOf === 'function') {
    try {
      const primitive = value.valueOf();
      if (primitive !== value) {
        return toBoolean(primitive, fallback);
      }
    } catch (error) {
      return fallback;
    }
  }
  return Boolean(value);
}

function normalizeHomeEntries(raw) {
  const source = raw && typeof raw === 'object' ? raw : {};
  const normalized = {};
  Object.keys(DEFAULT_HOME_ENTRIES).forEach((key) => {
    normalized[key] = toBoolean(source[key], DEFAULT_HOME_ENTRIES[key]);
  });
  return normalized;
}

function cloneHomeEntries(raw = DEFAULT_HOME_ENTRIES) {
  const normalized = normalizeHomeEntries(raw);
  return { ...normalized };
}

function toNumber(value) {
  const numeric = Number(value);
  return Number.isFinite(numeric) ? numeric : NaN;
}

function clampNonNegative(value) {
  return Math.max(0, value);
}

function normalizeRageSettings(raw) {
  const base = raw && typeof raw === 'object' ? raw : {};
  const normalized = {
    start: clampNonNegative(toNumber(base.start))
  };
  if (Number.isNaN(normalized.start)) {
    normalized.start = DEFAULT_RAGE_SETTINGS.start;
  }

  normalized.turnGain = clampNonNegative(toNumber(base.turnGain));
  if (Number.isNaN(normalized.turnGain)) {
    normalized.turnGain = DEFAULT_RAGE_SETTINGS.turnGain;
  }

  normalized.basicAttackGain = clampNonNegative(toNumber(base.basicAttackGain));
  if (Number.isNaN(normalized.basicAttackGain)) {
    normalized.basicAttackGain = DEFAULT_RAGE_SETTINGS.basicAttackGain;
  }

  const damageTakenMultiplier = toNumber(base.damageTakenMultiplier);
  normalized.damageTakenMultiplier = Number.isNaN(damageTakenMultiplier)
    ? DEFAULT_RAGE_SETTINGS.damageTakenMultiplier
    : Math.max(0, damageTakenMultiplier);

  const critGain = toNumber(base.critGain);
  normalized.critGain = Number.isNaN(critGain)
    ? DEFAULT_RAGE_SETTINGS.critGain
    : clampNonNegative(critGain);

  const critTakenGain = toNumber(base.critTakenGain);
  normalized.critTakenGain = Number.isNaN(critTakenGain)
    ? DEFAULT_RAGE_SETTINGS.critTakenGain
    : clampNonNegative(critTakenGain);

  return normalized;
}

function normalizeGameParameters(raw) {
  const base = raw && typeof raw === 'object' ? raw : {};
  return {
    rage: normalizeRageSettings(base.rage)
  };
}

function normalizeGlobalBackground(raw) {
  const base = raw && typeof raw === 'object' ? raw : {};
  const enabled = toBoolean(base.enabled, DEFAULT_GLOBAL_BACKGROUND.enabled);
  const desiredId = normalizeBackgroundId(base.backgroundId || '');
  const backgroundId = desiredId || (enabled ? getDefaultBackgroundId() : '');
  const animated = toBoolean(base.animated, DEFAULT_GLOBAL_BACKGROUND.animated);
  return {
    enabled,
    backgroundId,
    animated
  };
}

function cloneGlobalBackground(config = DEFAULT_GLOBAL_BACKGROUND) {
  const normalized = normalizeGlobalBackground(config);
  return {
    enabled: normalized.enabled,
    backgroundId: normalized.backgroundId,
    animated: normalized.animated
  };
}

function cloneRageSettings(settings = DEFAULT_RAGE_SETTINGS) {
  const normalized = normalizeRageSettings(settings);
  return {
    start: normalized.start,
    turnGain: normalized.turnGain,
    basicAttackGain: normalized.basicAttackGain,
    damageTakenMultiplier: normalized.damageTakenMultiplier,
    critGain: normalized.critGain,
    critTakenGain: normalized.critTakenGain
  };
}

function cloneGameParameters(parameters = DEFAULT_GAME_PARAMETERS) {
  const normalized = normalizeGameParameters(parameters);
  return {
    rage: cloneRageSettings(normalized.rage)
  };
}

function serializeRageSettings(settings) {
  const normalized = normalizeRageSettings(settings);
  return {
    start: normalized.start,
    turnGain: normalized.turnGain,
    basicAttackGain: normalized.basicAttackGain,
    damageTakenMultiplier: normalized.damageTakenMultiplier,
    critGain: normalized.critGain,
    critTakenGain: normalized.critTakenGain
  };
}

function serializeGameParameters(parameters) {
  const normalized = normalizeGameParameters(parameters);
  return {
    rage: serializeRageSettings(normalized.rage)
  };
}

function serializeGlobalBackground(config) {
  return cloneGlobalBackground(config);
}

function incrementCacheVersionValue(value) {
  const numeric = Number(value);
  if (!Number.isFinite(numeric) || numeric < 0) {
    return 1;
  }
  if (numeric >= Number.MAX_SAFE_INTEGER) {
    return 1;
  }
  return Math.max(0, Math.floor(numeric)) + 1;
}

function resolveRageSettingsSource(documentData) {
  if (!documentData || typeof documentData !== 'object') {
    return null;
  }
  if (documentData.gameParameters && typeof documentData.gameParameters === 'object') {
    return documentData.gameParameters.rage || null;
  }
  if (documentData.rageSettings) {
    return documentData.rageSettings;
  }
  return null;
}

function resolveGameParametersFromDocument(documentData) {
  const rageSource = resolveRageSettingsSource(documentData);
  if (!rageSource) {
    return cloneGameParameters(DEFAULT_GAME_PARAMETERS);
  }
  return {
    rage: normalizeRageSettings(rageSource)
  };
}

function buildResourceConfigOverrides(parameters) {
  const normalized = normalizeGameParameters(parameters);
  return {
    startValue: normalized.rage.start,
    turnGain: normalized.rage.turnGain,
    basicAttackGain: normalized.rage.basicAttackGain,
    damageTakenGain: normalized.rage.damageTakenMultiplier,
    critGain: normalized.rage.critGain,
    critTakenGain: normalized.rage.critTakenGain
  };
}

module.exports = {
  SYSTEM_SETTINGS_COLLECTION,
  FEATURE_TOGGLE_DOC_ID,
  DEFAULT_CACHE_VERSIONS,
  DEFAULT_HOME_ENTRIES,
  DEFAULT_RAGE_SETTINGS,
  DEFAULT_GAME_PARAMETERS,
  DEFAULT_GLOBAL_BACKGROUND,
  normalizeCacheVersions,
  normalizeHomeEntries,
  normalizeRageSettings,
  normalizeGameParameters,
  normalizeGlobalBackground,
  incrementCacheVersionValue,
  serializeRageSettings,
  serializeGameParameters,
  serializeGlobalBackground,
  resolveGameParametersFromDocument,
  buildResourceConfigOverrides,
  cloneCacheVersions,
  cloneHomeEntries,
  cloneRageSettings,
  cloneGameParameters,
  cloneGlobalBackground
};

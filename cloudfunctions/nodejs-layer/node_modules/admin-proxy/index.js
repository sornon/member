const { COLLECTIONS } = require('common-config');

const PROXY_SESSION_COLLECTION = COLLECTIONS.ADMIN_PROXY_SESSIONS || 'adminProxySessions';
const PROXY_LOG_COLLECTION = COLLECTIONS.ADMIN_PROXY_LOGS || 'adminProxyLogs';

function createErrorMatchers() {
  return {
    isCollectionNotExistsError(error) {
      if (!error || typeof error !== 'object') {
        return false;
      }
      const code = typeof error.errCode !== 'undefined' ? error.errCode : error.code;
      const message = typeof error.errMsg === 'string' ? error.errMsg : error.message || '';
      if (code === -502005) {
        return true;
      }
      return /collection not exist|database collection not exists|db or table not exist/i.test(message);
    },
    isCollectionAlreadyExistsError(error) {
      if (!error || typeof error !== 'object') {
        return false;
      }
      const code = typeof error.errCode !== 'undefined' ? error.errCode : error.code;
      const message = typeof error.errMsg === 'string' ? error.errMsg : error.message || '';
      return code === -502004 || /already exist/i.test(message);
    },
    isPermissionDeniedError(error) {
      if (!error || typeof error !== 'object') {
        return false;
      }
      const code = typeof error.errCode !== 'undefined' ? error.errCode : error.code;
      const message = typeof error.errMsg === 'string' ? error.errMsg : error.message || '';
      return code === -501000 || /permission denied/i.test(message);
    }
  };
}

function normalizeProxyMemberId(value) {
  if (typeof value === 'string') {
    return value.trim();
  }
  if (typeof value === 'number' && Number.isFinite(value)) {
    return String(value);
  }
  return '';
}

function sanitizeProxySessionPayload(session) {
  if (!session || typeof session !== 'object') {
    return null;
  }
  const targetMemberId = normalizeProxyMemberId(session.targetMemberId);
  if (!targetMemberId) {
    return null;
  }
  const payload = {
    sessionId: typeof session.sessionId === 'string' ? session.sessionId : '',
    adminId: normalizeProxyMemberId(session.adminId) || '',
    adminName: typeof session.adminName === 'string' ? session.adminName : '',
    targetMemberId,
    targetMemberName: typeof session.targetMemberName === 'string' ? session.targetMemberName : '',
    startedAt: session.startedAt || session.createdAt || session.updatedAt || null,
    active: session.active !== false
  };
  if (session.endedAt) {
    payload.endedAt = session.endedAt;
  }
  return payload;
}

function sanitizeProxyActionEvent(event) {
  if (!event || typeof event !== 'object') {
    return null;
  }
  const allowedKeys = [
    'action',
    'type',
    'operation',
    'memberId',
    'targetId',
    'levelId',
    'amount',
    'remark',
    'updates',
    'profile'
  ];
  const payload = {};
  allowedKeys.forEach((key) => {
    if (!Object.prototype.hasOwnProperty.call(event, key)) {
      return;
    }
    const value = event[key];
    if (value === null || typeof value === 'undefined') {
      return;
    }
    if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {
      payload[key] = value;
      return;
    }
    if (Array.isArray(value)) {
      payload[key] = value
        .filter((item) => typeof item === 'string' || typeof item === 'number' || typeof item === 'boolean')
        .slice(0, 5);
      return;
    }
    if (typeof value === 'object') {
      try {
        payload[key] = JSON.parse(JSON.stringify(value));
      } catch (error) {
        payload[key] = '[object]';
      }
    }
  });
  return Object.keys(payload).length ? payload : null;
}

function createProxyHelpers(cloud, options = {}) {
  if (!cloud || typeof cloud.database !== 'function') {
    throw new Error('Proxy helpers require an initialized cloud instance.');
  }

  const db = cloud.database();
  const loggerTag = options.loggerTag || 'proxy';
  const ensuredCollections = new Set();
  const {
    isCollectionNotExistsError,
    isCollectionAlreadyExistsError,
    isPermissionDeniedError
  } = createErrorMatchers();

  async function ensureCollectionExists(collectionName) {
    if (!collectionName || ensuredCollections.has(collectionName)) {
      return;
    }
    try {
      await db
        .collection(collectionName)
        .limit(1)
        .get();
      ensuredCollections.add(collectionName);
      return;
    } catch (error) {
      if (!isCollectionNotExistsError(error)) {
        console.warn(`[${loggerTag}] 检查集合 ${collectionName} 失败`, error);
        ensuredCollections.add(collectionName);
        return;
      }
    }

    try {
      await db.createCollection(collectionName);
      ensuredCollections.add(collectionName);
    } catch (error) {
      if (isCollectionAlreadyExistsError(error)) {
        ensuredCollections.add(collectionName);
        return;
      }
      if (isPermissionDeniedError(error)) {
        throw new Error(`没有权限自动创建集合 ${collectionName}，请前往云开发控制台手动创建该集合。`);
      }
      console.error(`[${loggerTag}] 创建集合 ${collectionName} 失败`, error);
      throw error;
    }
  }

  async function ensureProxyLogCollection() {
    await ensureCollectionExists(PROXY_LOG_COLLECTION);
  }

  async function resolveProxySessionForAdmin(adminId) {
    const normalizedAdminId = normalizeProxyMemberId(adminId);
    if (!normalizedAdminId) {
      return null;
    }
    try {
      const snapshot = await db.collection(PROXY_SESSION_COLLECTION).doc(normalizedAdminId).get();
      if (!snapshot || !snapshot.data) {
        return null;
      }
      const session = { ...snapshot.data };
      if (session.active === false) {
        return null;
      }
      if (!session.sessionId) {
        session.sessionId = `proxy_${Date.now()}_${Math.floor(Math.random() * 1000000)}`;
      }
      if (!session.adminId) {
        session.adminId = normalizedAdminId;
      }
      if (!session.startedAt && (session.createdAt || session.updatedAt)) {
        session.startedAt = session.createdAt || session.updatedAt;
      }
      const sanitized = sanitizeProxySessionPayload(session);
      if (!sanitized) {
        return null;
      }
      return sanitized;
    } catch (error) {
      const message =
        error && typeof error === 'object'
          ? typeof error.errMsg === 'string'
            ? error.errMsg
            : typeof error.message === 'string'
            ? error.message
            : ''
          : '';
      if (isCollectionNotExistsError(error)) {
        return null;
      }
      if (typeof message === 'string' && /does not exist/i.test(message)) {
        return null;
      }
      console.error(`[${loggerTag}] 获取代理会话失败`, error);
      return null;
    }
  }

  async function resolveProxyContext(openid) {
    const normalizedOpenId = normalizeProxyMemberId(openid);
    if (!normalizedOpenId) {
      return { memberId: '', proxySession: null };
    }
    const session = await resolveProxySessionForAdmin(normalizedOpenId);
    if (!session || session.active === false || !session.targetMemberId) {
      return { memberId: normalizedOpenId, proxySession: null };
    }
    return { memberId: session.targetMemberId, proxySession: session };
  }

  async function recordProxyAction(session, actorId, action, event = {}) {
    if (!session || !session.sessionId) {
      return;
    }
    await ensureProxyLogCollection();
    const payload = {
      sessionId: session.sessionId,
      type: 'action',
      adminId: session.adminId || actorId || '',
      adminName: session.adminName || '',
      actorId: actorId || session.adminId || '',
      targetMemberId: session.targetMemberId || '',
      targetMemberName: session.targetMemberName || '',
      action: action || '',
      createdAt: new Date()
    };
    const detail = sanitizeProxyActionEvent(event);
    if (detail) {
      payload.detail = detail;
    }
    try {
      await db.collection(PROXY_LOG_COLLECTION).add({ data: payload });
    } catch (error) {
      console.error(`[${loggerTag}] 记录代理操作失败`, error);
      throw error;
    }
  }

  return {
    PROXY_SESSION_COLLECTION,
    PROXY_LOG_COLLECTION,
    resolveProxySessionForAdmin,
    resolveProxyContext,
    recordProxyAction,
    ensureProxyLogCollection,
    ensureCollectionExists
  };
}

module.exports = {
  createProxyHelpers,
  PROXY_SESSION_COLLECTION,
  PROXY_LOG_COLLECTION
};

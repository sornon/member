'use strict';

const BASE_ATTRIBUTE_KEYS = ['constitution', 'strength', 'spirit', 'root', 'agility', 'insight'];
const COMBAT_STAT_KEYS = [
  'maxHp',
  'physicalAttack',
  'magicAttack',
  'physicalDefense',
  'magicDefense',
  'speed',
  'accuracy',
  'dodge',
  'critRate',
  'critDamage',
  'critResist',
  'finalDamageBonus',
  'finalDamageReduction',
  'lifeSteal',
  'healingBonus',
  'healingReduction',
  'controlHit',
  'controlResist',
  'physicalPenetration',
  'magicPenetration',
  'comboRate',
  'block',
  'counterRate',
  'damageReduction',
  'healingReceived',
  'rageGain',
  'controlStrength',
  'shieldPower',
  'summonPower',
  'elementalVulnerability'
];


const SKILL_TYPES = {
  active: { key: 'active', label: '主动技能' },
  passive: { key: 'passive', label: '被动技能' }
};

const SKILL_DISCIPLINES = {
  sword: { key: 'sword', label: '剑修' },
  spell: { key: 'spell', label: '法修' },
  body: { key: 'body', label: '体修' },
  beast: { key: 'beast', label: '御兽' },
  sigil: { key: 'sigil', label: '符箓' }
};

const ELEMENT_CONFIG = {
  none: { key: 'none', label: '无属性', color: '#c4ccdd' },
  fire: { key: 'fire', label: '火系', color: '#ff7243' },
  lightning: { key: 'lightning', label: '雷系', color: '#8a9eff' },
  water: { key: 'water', label: '水系', color: '#4ac6ff' },
  wood: { key: 'wood', label: '木系', color: '#54d794' },
  earth: { key: 'earth', label: '土系', color: '#d49a62' },
  poison: { key: 'poison', label: '毒系', color: '#9dc35d' }
};

const SKILL_QUALITY_CONFIG = {
  linggan: {
    key: 'linggan',
    label: '灵感',
    color: '#6c8cff',
    weight: 58,
    maxLevel: 25,
    imprintSlots: [{ unlockLevel: 25, count: 1 }]
  },
  kaipi: {
    key: 'kaipi',
    label: '开辟',
    color: '#45c0a8',
    weight: 24,
    maxLevel: 35,
    imprintSlots: [{ unlockLevel: 25, count: 1 }]
  },
  tongxuan: {
    key: 'tongxuan',
    label: '通玄',
    color: '#b281ff',
    weight: 12,
    maxLevel: 50,
    imprintSlots: [
      { unlockLevel: 25, count: 1 },
      { unlockLevel: 50, count: 2, breakthrough: true }
    ]
  },
  wudao: {
    key: 'wudao',
    label: '悟道',
    color: '#f2a546',
    weight: 6,
    maxLevel: 50,
    imprintSlots: [
      { unlockLevel: 25, count: 1 },
      { unlockLevel: 40, count: 2 },
      { unlockLevel: 50, count: 3, exclusive: true }
    ]
  }
};


const SKILL_LIBRARY = [
  {
    id: 'sword_breaking_clouds',
    name: '破云斩',
    quality: 'linggan',
    type: 'active',
    discipline: 'sword',
    element: 'none',
    description: '以剑气撕裂前方敌人，奠定剑修入门的爆发节奏。',
    params: { cooldown: 2, cost: 20, range: '单体' },
    mechanics: ['造成 120% 攻击伤害，若暴击则额外造成 30% 伤害。'],
    growth: ['每级伤害 +4%，25 级解锁 1 个印记槽。'],
    tags: ['单体', '爆发'],
    maxLevel: 25
  },
  {
    id: 'spell_burning_burst',
    name: '烈炽火弹',
    quality: 'linggan',
    type: 'active',
    discipline: 'spell',
    element: 'fire',
    description: '凝聚火弹轰击目标，为法修建立起持续燃烧的基础。',
    params: { cooldown: 3, cost: 22, range: '单体' },
    mechanics: ['命中造成 100% 法攻，并附加 2 回合灼烧（每回合 20% 法攻）。'],
    growth: ['每级灼烧伤害 +2%，冷却固定 3 回合。'],
    tags: ['DOT', '火系'],
    maxLevel: 25
  },
  {
    id: 'spell_frost_bolt',
    name: '凝霜矢',
    quality: 'kaipi',
    type: 'active',
    discipline: 'spell',
    element: 'water',
    description: '由灵力凝成的寒矢，命中即可拖慢敌人的行动。',
    params: { cooldown: 3, cost: 24, range: '单体' },
    mechanics: ['造成 130% 法攻并减速 30% 持续 2 回合。'],
    growth: ['每级伤害 +3%，减速 +1%。'],
    tags: ['减速', '水系'],
    maxLevel: 35
  },
  {
    id: 'body_bronze_skin',
    name: '铜皮诀',
    quality: 'linggan',
    type: 'passive',
    discipline: 'body',
    element: 'earth',
    description: '借地气淬体，短时化身铜皮铁骨，抵御外伤。',
    mechanics: ['受击时获得 8% 减伤，持续 1 回合，冷却 3 回合。'],
    growth: ['每级额外减伤 +0.5%，冷却不变。'],
    modifiers: { base: { damageReduction: 0.08 }, perLevel: { damageReduction: 0.005 } },
    tags: ['防御', '减伤'],
    maxLevel: 25
  },
  {
    id: 'body_blood_ignite',
    name: '焚血激',
    quality: 'kaipi',
    type: 'active',
    discipline: 'body',
    element: 'fire',
    description: '燃烧精血换取瞬间续航与反击之势。',
    params: { cooldown: 4, cost: 18, range: '自身' },
    mechanics: ['回复 15% 生命并获得 10% 反震，持续 2 回合。'],
    growth: ['每级回复 +1%，反震 +1%。'],
    tags: ['续航', '反震'],
    maxLevel: 35
  },
  {
    id: 'beast_spirit_pact',
    name: '灵契术',
    quality: 'linggan',
    type: 'active',
    discipline: 'beast',
    element: 'wood',
    description: '与灵兽缔结短暂契约，唤醒潜藏的攻击本能。',
    params: { cooldown: 4, cost: 20, range: '灵兽' },
    mechanics: ['灵兽攻击力 +15%，持续 3 回合。'],
    growth: ['每级加成 +1%，25 级解锁印记槽。'],
    tags: ['御兽', '增益'],
    maxLevel: 25
  },
  {
    id: 'beast_war_drum',
    name: '兽魂鼓',
    quality: 'kaipi',
    type: 'passive',
    discipline: 'beast',
    element: 'lightning',
    description: '灵鼓震荡心神，灵兽出手即回荡真气。',
    mechanics: ['灵兽释放技能后，主人回复 5% 真气，冷却 2 回合。'],
    growth: ['每级真气回复 +0.3%。'],
    tags: ['回气', '御兽'],
    maxLevel: 35
  },
  {
    id: 'sigil_focus_talisman',
    name: '定神符',
    quality: 'linggan',
    type: 'active',
    discipline: 'sigil',
    element: 'lightning',
    description: '以雷纹封锁心神，短暂夺去敌人的行动。',
    params: { cooldown: 5, cost: 26, range: '单体' },
    mechanics: ['80% 命中率眩晕 1 回合，未命中仍造成微量雷伤。'],
    growth: ['每级命中率 +2%。'],
    tags: ['眩晕', '控制'],
    maxLevel: 25
  },
  {
    id: 'sigil_corroding_mark',
    name: '蚀骨符',
    quality: 'kaipi',
    type: 'active',
    discipline: 'sigil',
    element: 'poison',
    description: '以腐蚀灵纹侵蚀对手筋骨，削弱其护体灵力。',
    params: { cooldown: 4, cost: 24, range: '单体' },
    mechanics: ['降低敌方 10% 防御并施加每回合 10% 中毒，持续 3 回合。'],
    growth: ['每级防御降低 +0.5%。'],
    tags: ['减防', '毒系'],
    maxLevel: 35
  },
  {
    id: 'sigil_void_respiration',
    name: '虚神息',
    quality: 'kaipi',
    type: 'passive',
    discipline: 'sigil',
    element: 'water',
    description: '调息真灵，扩展体内真气的循环空间。',
    mechanics: ['真气上限 +10%，回合结束额外回复 1% 真气。'],
    growth: ['每级真气上限 +1%。'],
    tags: ['回气', '辅助'],
    maxLevel: 35
  },
  {
    id: 'sword_thousand_blades',
    name: '千刃星陨',
    quality: 'tongxuan',
    type: 'active',
    discipline: 'sword',
    element: 'lightning',
    description: '汇聚剑意，雷霆般斩击四次，立刻压制要害。',
    params: { cooldown: 4, cost: 40, range: '单体' },
    mechanics: ['消耗 3 层剑意连续斩击 4 次，每次 70% 攻击；击杀刷新冷却。'],
    growth: ['每级每段伤害 +3%，剑意消耗固定。'],
    tags: ['连击', '爆发'],
    maxLevel: 50
  },
  {
    id: 'sword_immortal_domain',
    name: '戮仙剑域',
    quality: 'wudao',
    type: 'active',
    discipline: 'sword',
    element: 'none',
    description: '展开三回合剑域，将普攻与技能转化为无尽剑雨。',
    params: { cooldown: 6, cost: 55, range: '自身领域' },
    mechanics: ['普攻与技能额外触发 50% 剑气，暴击时生成剑意。'],
    growth: ['每级剑气伤害 +2%，专属符印提供穿透或变体效果。'],
    tags: ['领域', '爆发'],
    maxLevel: 50
  },
  {
    id: 'spell_pyrocataclysm',
    name: '离火焚天',
    quality: 'tongxuan',
    type: 'active',
    discipline: 'spell',
    element: 'fire',
    description: '布设离火阵焚烧战场，叠加灼烧与易伤。',
    params: { cooldown: 5, cost: 42, range: '大范围' },
    mechanics: ['造成 180% 法攻并附加 15% 易伤，灼烧每回合 30% 法攻。'],
    growth: ['每级伤害 +4%，易伤 +1%。'],
    tags: ['AOE', '火系'],
    maxLevel: 50
  },
  {
    id: 'spell_thunder_chain',
    name: '万雷劫链',
    quality: 'wudao',
    type: 'active',
    discipline: 'spell',
    element: 'lightning',
    description: '雷霆链式劈落，撕裂群体并施加短暂眩晕。',
    params: { cooldown: 6, cost: 58, range: '链式 5 体' },
    mechanics: ['首目标 220% 法攻，最多连锁 5 名敌人，每次命中 40% 基础眩晕。'],
    growth: ['每级伤害 +5%，眩晕概率 +3%。'],
    tags: ['群体', '眩晕'],
    maxLevel: 50
  },
  {
    id: 'body_diamond_eternity',
    name: '金刚不灭',
    quality: 'tongxuan',
    type: 'passive',
    discipline: 'body',
    element: 'earth',
    description: '濒死之际金刚护体，迅速稳住血线。',
    mechanics: ['生命低于 35% 触发 40% 减伤并每回合恢复 10% 生命，持续 3 回合，冷却 6 回合。'],
    growth: ['每级减伤 +2%，回复 +1%。'],
    modifiers: { base: { damageReduction: 0.1 }, perLevel: { damageReduction: 0.02 } },
    tags: ['保命', '减伤'],
    maxLevel: 50
  },
  {
    id: 'body_furnace_of_ruin',
    name: '焚世熔炉',
    quality: 'wudao',
    type: 'active',
    discipline: 'body',
    element: 'fire',
    description: '化身熔炉，护盾吸收巨量伤害并反射灼烧。',
    params: { cooldown: 6, cost: 60, range: '自身' },
    mechanics: ['护盾吸收 40% 生命并对近战者反射 20% 真实灼烧；破裂时爆发 250% 火伤。'],
    growth: ['每级护盾 +3%，反射 +1%。'],
    tags: ['护盾', '反击'],
    maxLevel: 50
  },
  {
    id: 'beast_shared_heart',
    name: '玄兽同心',
    quality: 'tongxuan',
    type: 'passive',
    discipline: 'beast',
    element: 'wood',
    description: '主宠同心协力，持续提升攻速与回气。',
    mechanics: ['灵兽命中给主人叠加“同心”层：攻速 +5%、真气回复 +5%，最高 5 层。'],
    growth: ['每级加成 +0.5%，倒地后保留 1 层。'],
    tags: ['攻速', '御兽'],
    maxLevel: 50
  },
  {
    id: 'beast_empyrial_charge',
    name: '帝御九霄',
    quality: 'wudao',
    type: 'active',
    discipline: 'beast',
    element: 'lightning',
    description: '统御灵兽极速协同，打造爆发回合。',
    params: { cooldown: 6, cost: 58, range: '灵兽' },
    mechanics: ['灵兽立即行动并获得伤害 +40%、技能冷却 -1；主人下次主动技能额外造成 100% 伤害。'],
    growth: ['每级狂暴加成 +2%，额外伤害 +5%。'],
    tags: ['连携', '爆发'],
    maxLevel: 50
  },
  {
    id: 'sigil_soul_bind',
    name: '镇魂神符',
    quality: 'tongxuan',
    type: 'active',
    discipline: 'sigil',
    element: 'water',
    description: '水灵镇压心魂，大范围沉默拖延敌阵节奏。',
    params: { cooldown: 5, cost: 44, range: '全体' },
    mechanics: ['沉默全体 2 回合并降低 20% 真气恢复，命中率 70%。'],
    growth: ['每级命中 +2%，减真气 +2%。'],
    tags: ['沉默', '群控'],
    maxLevel: 50
  },
  {
    id: 'sigil_taiyi_barrier',
    name: '太乙护界',
    quality: 'wudao',
    type: 'active',
    discipline: 'sigil',
    element: 'earth',
    description: '太乙护界笼罩全体，护盾与抗性同步提升。',
    params: { cooldown: 7, cost: 60, range: '全体友方' },
    mechanics: ['全体获得 30% 生命护盾 +20% 抗性，持续 3 回合；受控时自动净化并反射。'],
    growth: ['每级护盾 +2%、抗性 +1%，符印可解锁群体复活。'],
    tags: ['护盾', '净化'],
    maxLevel: 50
  },
  {
    id: 'sword_flowing_strike',
    name: '流光剑步',
    quality: 'kaipi',
    type: 'active',
    discipline: 'sword',
    element: 'lightning',
    description: '身影化流光，迅疾突进完成破绽打击。',
    params: { cooldown: 4, cost: 24, range: '突进单体' },
    mechanics: ['突进至目标身后造成 140% 攻击，自身敏捷 +12%，持续 2 回合。'],
    growth: ['每级伤害 +3%，敏捷加成 +0.5%。'],
    tags: ['机动', '敏捷'],
    maxLevel: 35
  },
  {
    id: 'sword_flame_wings',
    name: '烈羽焚锋',
    quality: 'kaipi',
    type: 'active',
    discipline: 'sword',
    element: 'fire',
    description: '炽羽化刃，扫荡前方两格敌人。',
    params: { cooldown: 4, cost: 26, range: '前方两格' },
    mechanics: ['对前方两格各造成 135% 攻击并附 2 回合灼烧（每回合 15% 攻击）。'],
    growth: ['每级伤害 +3%，灼烧 +1%。'],
    tags: ['多段', '火系'],
    maxLevel: 35
  },
  {
    id: 'spell_frost_tide',
    name: '凌霜定潮',
    quality: 'kaipi',
    type: 'active',
    discipline: 'spell',
    element: 'water',
    description: '唤起寒潮限制敌人攻势。',
    params: { cooldown: 4, cost: 24, range: '小范围' },
    mechanics: ['造成 130% 法攻并降低目标 20% 攻速，持续 2 回合。'],
    growth: ['每级伤害 +2%，减速 +1%。'],
    tags: ['攻速削减', '水系'],
    maxLevel: 35
  },
  {
    id: 'spell_searing_comet',
    name: '灼脉流炬',
    quality: 'kaipi',
    type: 'active',
    discipline: 'spell',
    element: 'fire',
    description: '火线贯穿敌阵，对灼烧目标造成额外爆裂。',
    params: { cooldown: 4, cost: 28, range: '直线' },
    mechanics: ['直线造成 145% 法攻，命中灼烧目标额外造成 30% 瞬时伤害。'],
    growth: ['每级基础伤害 +3%，额外伤害 +2%。'],
    tags: ['直线', '火系'],
    maxLevel: 35
  },
  {
    id: 'body_rockridge_guard',
    name: '岩嵯坚体',
    quality: 'kaipi',
    type: 'passive',
    discipline: 'body',
    element: 'earth',
    description: '遇到暴击时岩甲护体，提升坦度。',
    mechanics: ['受到暴击触发岩甲：减伤 25% 并回复 8% 生命，持续 1 回合，冷却 3 回合。'],
    growth: ['每级减伤 +1%，回复 +0.5%。'],
    modifiers: { base: { damageReduction: 0.05 }, perLevel: { damageReduction: 0.01 } },
    tags: ['减伤', '恢复'],
    maxLevel: 35
  },
  {
    id: 'body_blood_fury',
    name: '熔血怒元',
    quality: 'kaipi',
    type: 'active',
    discipline: 'body',
    element: 'fire',
    description: '激发熔血之力，短时间化守为攻。',
    params: { cooldown: 4, cost: 20, range: '自身' },
    mechanics: ['立即回复 12% 生命并获得 15% 反震，持续 2 回合；被攻击者额外承受 10% 火伤。'],
    growth: ['每级回复 +0.8%，反震 +1%，火伤 +0.5%。'],
    tags: ['反击', '火系'],
    maxLevel: 35
  },
  {
    id: 'beast_wood_blessing',
    name: '木灵惠泽',
    quality: 'kaipi',
    type: 'active',
    discipline: 'beast',
    element: 'wood',
    description: '木灵环绕，快速治愈灵兽伤势。',
    params: { cooldown: 5, cost: 22, range: '灵兽' },
    mechanics: ['灵兽回复 18% 生命并获得治疗量 +20%，持续 3 回合。'],
    growth: ['每级治疗加成 +1%。'],
    tags: ['治疗', '御兽'],
    maxLevel: 35
  },
  {
    id: 'beast_thunder_command',
    name: '雷驭号令',
    quality: 'kaipi',
    type: 'passive',
    discipline: 'beast',
    element: 'lightning',
    description: '雷霆号令推动主角技的节奏。',
    mechanics: ['灵兽释放技能后使主人下次主动技能冷却 -1，冷却 3 回合。'],
    growth: ['每级额外缩短 0.1 回合，向下取整至最多 -2。'],
    tags: ['冷却缩减', '御兽'],
    maxLevel: 35
  },
  {
    id: 'sigil_rupture_chain',
    name: '断厄符索',
    quality: 'kaipi',
    type: 'active',
    discipline: 'sigil',
    element: 'poison',
    description: '符索缠绕经脉，阻断妖气流动。',
    params: { cooldown: 4, cost: 24, range: '单体' },
    mechanics: ['造成 120% 法攻并降低 20% 妖气回复，持续 3 回合。'],
    growth: ['每级伤害 +2%，回复降低 +1%。'],
    tags: ['资源压制', '毒系'],
    maxLevel: 35
  },
  {
    id: 'sigil_purified_mind',
    name: '清魂定印',
    quality: 'kaipi',
    type: 'passive',
    discipline: 'sigil',
    element: 'water',
    description: '心神澄净，减缓负面影响。',
    mechanics: ['若自身未受控，回合结束回复 3% 真气并清除 1 层减益，冷却 2 回合。'],
    growth: ['每级真气恢复 +0.2%。'],
    tags: ['回气', '净化'],
    maxLevel: 35
  },
  {
    id: 'sword_thunder_break',
    name: '雷霆断界',
    quality: 'tongxuan',
    type: 'active',
    discipline: 'sword',
    element: 'lightning',
    description: '剑势化雷，兼具伤害与眩晕。',
    params: { cooldown: 4, cost: 36, range: '单体' },
    mechanics: ['消耗 2 层剑意连击 3 次（每次 60% 攻击），并有 50% 几率眩晕 1 回合。'],
    growth: ['每级每段 +4%，眩晕概率 +2%。'],
    tags: ['连击', '眩晕'],
    maxLevel: 50
  },
  {
    id: 'sword_blazing_brand',
    name: '焚霞御剑',
    quality: 'tongxuan',
    type: 'passive',
    discipline: 'sword',
    element: 'fire',
    description: '暴击附加剑炎标记，造成追加火伤。',
    mechanics: ['暴击时附加剑炎，下一次受击额外承受 70% 攻击火伤，冷却 2 回合。'],
    growth: ['每级附加伤害 +4%。'],
    tags: ['燃烧', '爆发'],
    maxLevel: 50
  },
  {
    id: 'spell_frost_prison',
    name: '霜渊天缚',
    quality: 'tongxuan',
    type: 'active',
    discipline: 'spell',
    element: 'water',
    description: '冰棱阵冻结战场，解除时造成额外破冰伤。',
    params: { cooldown: 5, cost: 40, range: '大范围' },
    mechanics: ['造成 170% 法攻并冻结 2 回合（基础 60% 命中），破冰额外造成 40% 法攻。'],
    growth: ['每级伤害 +4%，冻结命中 +2%。'],
    tags: ['冻结', '控场'],
    maxLevel: 50
  },
  {
    id: 'spell_scorching_void',
    name: '灼阳星墟',
    quality: 'tongxuan',
    type: 'active',
    discipline: 'spell',
    element: 'fire',
    description: '引燃星火坠落，叠加自身火势层数。',
    params: { cooldown: 4, cost: 38, range: '小范围' },
    mechanics: ['造成 180% 法攻并附加 12% 易伤 3 回合，自身获得 1 层火势（法攻 +5%）。'],
    growth: ['每级伤害 +4%，易伤 +1%，火势最多 3 层。'],
    tags: ['爆发', '火势'],
    maxLevel: 50
  },
  {
    id: 'body_stone_bulwark',
    name: '玄石擎壁',
    quality: 'tongxuan',
    type: 'passive',
    discipline: 'body',
    element: 'earth',
    description: '生命危急时形成玄石护壁并反射伤害。',
    mechanics: ['生命低于 50% 生成护盾吸收 30% 生命并反射 15% 土伤，持续 2 回合。'],
    growth: ['每级护盾 +2%，反射 +1%。'],
    tags: ['护盾', '反击'],
    maxLevel: 50
  },
  {
    id: 'body_flame_shroud',
    name: '炎魂蔽天',
    quality: 'tongxuan',
    type: 'active',
    discipline: 'body',
    element: 'fire',
    description: '炎魂护体，兼顾减伤与反击。',
    params: { cooldown: 5, cost: 40, range: '自身' },
    mechanics: ['开启 2 回合炎魂：减伤 25%，对近战者造成每回合 60% 火反击并回复 5% 生命。'],
    growth: ['每级减伤 +1%，反击 +3%，回复 +0.5%。'],
    tags: ['反击', '持续'],
    maxLevel: 50
  },
  {
    id: 'beast_shared_vein',
    name: '同脉灵契',
    quality: 'tongxuan',
    type: 'passive',
    discipline: 'beast',
    element: 'wood',
    description: '人宠同脉，分享增益与真气。',
    mechanics: ['灵兽命中后给主人与灵兽各回复 4% 真气并延长共享增益 1 回合，冷却 3 回合。'],
    growth: ['每级回复 +0.3%，延长最多 3 回合。'],
    tags: ['回气', '增益延长'],
    maxLevel: 50
  },
  {
    id: 'beast_electric_assault',
    name: '电翎急袭',
    quality: 'tongxuan',
    type: 'active',
    discipline: 'beast',
    element: 'lightning',
    description: '命令灵兽穿梭战场，打出额外雷击。',
    params: { cooldown: 4, cost: 34, range: '单体连锁' },
    mechanics: ['灵兽立即行动造成两段 75% 雷击，若目标被眩晕则连锁至另一名敌人。'],
    growth: ['每级伤害 +3%，连锁伤害完全继承。'],
    tags: ['连携', '雷系'],
    maxLevel: 50
  },
  {
    id: 'sigil_nine_palace',
    name: '九宫封煞',
    quality: 'tongxuan',
    type: 'active',
    discipline: 'sigil',
    element: 'earth',
    description: '布置九宫结界限制敌军移动与防御。',
    params: { cooldown: 5, cost: 42, range: '范围' },
    mechanics: ['范围内敌人减速 40%、防御 -15%，持续 2 回合；首个击败目标被禁锢。'],
    growth: ['每级减速 +1%，防御降低 +0.5%。'],
    tags: ['减速', '禁锢'],
    maxLevel: 50
  },
  {
    id: 'sigil_heart_rot',
    name: '灭脉蚀心',
    quality: 'tongxuan',
    type: 'passive',
    discipline: 'sigil',
    element: 'poison',
    description: '对中毒者施加蚀心印记，压制其治疗。',
    mechanics: ['攻击中毒目标时附加“蚀心”：受治疗 -20%，持续 2 回合，冷却 2 回合。'],
    growth: ['每级治疗压制 +1%。'],
    tags: ['治疗压制', '毒系'],
    maxLevel: 50
  }
];

const SKILL_MAP = buildMap(SKILL_LIBRARY);

function buildMap(list) {
  const map = {};
  list.forEach((item) => {
    map[item.id] = item;
  });
  return map;
}

function createBonusSummary() {
  const base = {};
  BASE_ATTRIBUTE_KEYS.forEach((key) => {
    base[key] = 0;
  });
  const combatAdditive = {};
  const combatMultipliers = {};
  COMBAT_STAT_KEYS.forEach((key) => {
    combatAdditive[key] = 0;
    combatMultipliers[key] = 1;
  });
  return {
    base,
    combatAdditive,
    combatMultipliers,
    special: { shield: 0, bonusDamage: 0, dodgeChance: 0 },
    sets: [],
    notes: []
  };
}

function applyBonus(summary, key, value) {
  if (!summary || value == null || value === 0) {
    return;
  }
  if (BASE_ATTRIBUTE_KEYS.includes(key)) {
    summary.base[key] = (summary.base[key] || 0) + value;
    return;
  }
  if (key.endsWith('Multiplier')) {
    const target = key.replace('Multiplier', '');
    if (COMBAT_STAT_KEYS.includes(target)) {
      summary.combatMultipliers[target] = (summary.combatMultipliers[target] || 1) * (1 + value);
    }
    return;
  }
  if (COMBAT_STAT_KEYS.includes(key)) {
    summary.combatAdditive[key] = (summary.combatAdditive[key] || 0) + value;
    return;
  }
  if (key === 'shield' || key === 'bonusDamage' || key === 'dodgeChance') {
    summary.special[key] = (summary.special[key] || 0) + value;
  }
}

function mergeBonusSummary(target, source) {
  if (!source) {
    return target;
  }
  BASE_ATTRIBUTE_KEYS.forEach((key) => {
    target.base[key] = (target.base[key] || 0) + (source.base[key] || 0);
  });
  COMBAT_STAT_KEYS.forEach((key) => {
    target.combatAdditive[key] = (target.combatAdditive[key] || 0) + (source.combatAdditive[key] || 0);
    target.combatMultipliers[key] = (target.combatMultipliers[key] || 1) * (source.combatMultipliers[key] || 1);
  });
  target.special.shield = (target.special.shield || 0) + (source.special.shield || 0);
  target.special.bonusDamage = (target.special.bonusDamage || 0) + (source.special.bonusDamage || 0);
  target.special.dodgeChance = (target.special.dodgeChance || 0) + (source.special.dodgeChance || 0);
  if (Array.isArray(source.notes) && source.notes.length) {
    target.notes.push(...source.notes);
  }
  if (Array.isArray(source.sets) && source.sets.length) {
    target.sets.push(...source.sets);
  }
  return target;
}

function flattenBonusSummary(summary) {
  const result = {};
  BASE_ATTRIBUTE_KEYS.forEach((key) => {
    if (summary.base[key]) {
      result[key] = summary.base[key];
    }
  });
  COMBAT_STAT_KEYS.forEach((key) => {
    if (summary.combatAdditive[key]) {
      result[key] = (result[key] || 0) + summary.combatAdditive[key];
    }
    if (summary.combatMultipliers[key] && summary.combatMultipliers[key] !== 1) {
      result[`${key}Multiplier`] = (summary.combatMultipliers[key] || 1) - 1;
    }
  });
  if (summary.special.shield) {
    result.shield = (result.shield || 0) + summary.special.shield;
  }
  if (summary.special.bonusDamage) {
    result.bonusDamage = (result.bonusDamage || 0) + summary.special.bonusDamage;
  }
  if (summary.special.dodgeChance) {
    result.dodgeChance = (result.dodgeChance || 0) + summary.special.dodgeChance;
  }
  return result;
}

function aggregateSkillEffects(skills) {
  const summary = createBonusSummary();
  if (!skills || typeof skills !== 'object') {
    return summary;
  }

  const inventory = Array.isArray(skills.inventory) ? skills.inventory : [];
  const equipped = Array.isArray(skills.equipped) ? skills.equipped : [];
  const inventoryMap = inventory.reduce((map, entry) => {
    map[entry.skillId] = entry;
    return map;
  }, {});

  equipped.forEach((skillId) => {
    if (!skillId) return;
    const entry = inventoryMap[skillId] || { skillId, level: 1 };
    const definition = SKILL_MAP[skillId];
    if (!definition) return;
    const effects = resolveSkillEffects(definition, entry.level || 1);
    mergeBonusSummary(summary, effects);
  });

  return summary;
}

function resolveSkillEffects(definition, level = 1) {
  const summary = createBonusSummary();
  if (!definition) {
    return summary;
  }
  const quality = definition.quality || 'linggan';
  const qualityConfig = SKILL_QUALITY_CONFIG[quality];
  const defaultMaxLevel = (qualityConfig && qualityConfig.maxLevel) || 5;
  const maxLevel = definition.maxLevel || defaultMaxLevel;
  const clampedLevel = Math.min(maxLevel, Math.max(1, level));
  const extraLevel = clampedLevel - 1;

  if (definition.modifiers && typeof definition.modifiers === 'object') {
    applyModifierGroup(summary, definition.modifiers.base, 1);
    applyModifierGroup(summary, definition.modifiers.perLevel, extraLevel);
    applyModifierGroup(summary, definition.modifiers.multipliers, 1);
    applyModifierGroup(summary, definition.modifiers.multipliersPerLevel, extraLevel);
    applyModifierGroup(summary, definition.modifiers.special, 1);
    applyModifierGroup(summary, definition.modifiers.specialPerLevel, extraLevel);
    if (Array.isArray(definition.modifiers.notes)) {
      summary.notes.push(...definition.modifiers.notes);
    }
    return summary;
  }

  const effects = definition.effects || {};
  const scaling = definition.levelScaling || {};

  Object.keys(effects).forEach((key) => {
    const baseValue = effects[key] || 0;
    const scaleValue = scaling[key] || 0;
    const total = baseValue + scaleValue * extraLevel;
    applyBonus(summary, key, total);
  });

  Object.keys(scaling).forEach((key) => {
    if (effects[key]) {
      return;
    }
    const extra = (scaling[key] || 0) * extraLevel;
    applyBonus(summary, key, extra);
  });

  return summary;
}

function applyModifierGroup(summary, group, scale = 1) {
  if (!group || typeof group !== 'object') {
    return;
  }
  Object.keys(group).forEach((key) => {
    const value = group[key];
    if (typeof value === 'number') {
      applyBonus(summary, key, value * scale);
    } else if (value && typeof value === 'object' && !Array.isArray(value)) {
      applyModifierGroup(summary, value, scale);
    }
  });
}

function resolveSkillQualityColor(quality) {
  const config = SKILL_QUALITY_CONFIG[quality];
  return (config && config.color) || '#9aa4b5';
}

function resolveSkillQualityLabel(quality) {
  const config = SKILL_QUALITY_CONFIG[quality];
  return (config && config.label) || '灵感';
}

function resolveSkillTypeLabel(type) {
  const config = SKILL_TYPES[type];
  return (config && config.label) || '技能';
}

function resolveSkillDisciplineLabel(key) {
  const config = SKILL_DISCIPLINES[key];
  return (config && config.label) || '通用';
}

function resolveSkillElementLabel(element) {
  const config = ELEMENT_CONFIG[element];
  return (config && config.label) || '无属性';
}

function resolveSkillMaxLevel(skillId) {
  const definition = SKILL_MAP[skillId];
  if (!definition) {
    return 5;
  }
  const qualityConfig = SKILL_QUALITY_CONFIG[definition.quality];
  const fallback = (qualityConfig && qualityConfig.maxLevel) || 5;
  return definition.maxLevel || fallback;
}


module.exports = {
  BASE_ATTRIBUTE_KEYS,
  COMBAT_STAT_KEYS,
  SKILL_TYPES,
  SKILL_DISCIPLINES,
  ELEMENT_CONFIG,
  SKILL_QUALITY_CONFIG,
  SKILL_LIBRARY,
  SKILL_MAP,
  createBonusSummary,
  applyBonus,
  mergeBonusSummary,
  flattenBonusSummary,
  aggregateSkillEffects,
  resolveSkillEffects,
  resolveSkillQualityColor,
  resolveSkillQualityLabel,
  resolveSkillTypeLabel,
  resolveSkillDisciplineLabel,
  resolveSkillElementLabel,
  resolveSkillMaxLevel
};
